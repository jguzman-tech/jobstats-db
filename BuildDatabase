#!/usr/bin/env python3


"""
Desc: A script for generating the needed SQL tables for jobstats

Authors:
    - Chance Nelson <chance-nelson@nau.edu>
"""


import sys
import mysql.connector as mariadb
from mysql.connector import errorcode
import configparser


def genTables(username, password, host):
    """
    Desc: Generate the 'jobstats' table, with needed columns:
          ['username', 'account', 'date' | 'cores', 'memory', 'timelimit'].
          Cores, memory, and timelimit have two columns for requested amount
          of resources and resources used in the job.

    Args:
        username (string): username of mariaDB account login
        password (string): password of mariaDB account login
        host (string): Host of the db
    """
    tableName = 'jobs'
    tables = {}
    tables['jobs'] = (
        "CREATE TABLE jobs ("
        "username varchar(10) NOT NULL,"
        "account varchar(20) NOT NULL,"
        "date date NOT NULL,"
        "idealcpu  float,"
        "memoryreq int,"
        "tlimitreq int,"
        "cputime   float,"
        "tlimituse int,"
        "memoryuse int,"
        "jobsum int NOT NULL,"
        "PRIMARY KEY (username, account, date))"
        )

    if password == '':
        password = None

    conn = mariadb.connect(user=username, password=password, host=host)
    cursor = conn.cursor()

    cursor.execute('USE jobstats')

    for key in tables:
        cursor.execute(tables[key])

    cursor.close()
    conn.close()


if __name__ == '__main__':
    config = configparser.ConfigParser()
    config.read('config.ini')

    try:
        username = config['jobstats-db']['username']
        password = config['jobstats-db']['password']
        host     = config['jobstats-db']['host']

    except:
        print('Error: invalid config file')
        exit(1)

    try:
        genTables(username, password, host)
    
    except mariadb.connector.Error as err:
        if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:
            print("Error: Table already exists")
        
        elif err.errno == errorcode.ER_BAD_DB_ERROR:
            print("Error: Cannot create table")

        else:
            print("Error: " + err.errno)

        exit(1)

    print("Tables created!")
